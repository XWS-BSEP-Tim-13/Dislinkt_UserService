// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: user_info/user_info_service.proto

package user_info

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserInfoServiceClient is the client API for UserInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInfoServiceClient interface {
	UpdatePersonalInfo(ctx context.Context, in *UserInfoUpdate, opts ...grpc.CallOption) (*UserInfoUpdateResponse, error)
	AddExperience(ctx context.Context, in *ExperienceUpdateRequest, opts ...grpc.CallOption) (*UserInfoUpdateResponse, error)
	AddEducation(ctx context.Context, in *EducationUpdateRequest, opts ...grpc.CallOption) (*UserInfoUpdateResponse, error)
	AddSkill(ctx context.Context, in *SkillsUpdateRequest, opts ...grpc.CallOption) (*UserInfoUpdateResponse, error)
	AddInterest(ctx context.Context, in *InterestsUpdateRequest, opts ...grpc.CallOption) (*UserInfoUpdateResponse, error)
}

type userInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInfoServiceClient(cc grpc.ClientConnInterface) UserInfoServiceClient {
	return &userInfoServiceClient{cc}
}

func (c *userInfoServiceClient) UpdatePersonalInfo(ctx context.Context, in *UserInfoUpdate, opts ...grpc.CallOption) (*UserInfoUpdateResponse, error) {
	out := new(UserInfoUpdateResponse)
	err := c.cc.Invoke(ctx, "/user_info.UserInfoService/UpdatePersonalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoServiceClient) AddExperience(ctx context.Context, in *ExperienceUpdateRequest, opts ...grpc.CallOption) (*UserInfoUpdateResponse, error) {
	out := new(UserInfoUpdateResponse)
	err := c.cc.Invoke(ctx, "/user_info.UserInfoService/AddExperience", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoServiceClient) AddEducation(ctx context.Context, in *EducationUpdateRequest, opts ...grpc.CallOption) (*UserInfoUpdateResponse, error) {
	out := new(UserInfoUpdateResponse)
	err := c.cc.Invoke(ctx, "/user_info.UserInfoService/AddEducation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoServiceClient) AddSkill(ctx context.Context, in *SkillsUpdateRequest, opts ...grpc.CallOption) (*UserInfoUpdateResponse, error) {
	out := new(UserInfoUpdateResponse)
	err := c.cc.Invoke(ctx, "/user_info.UserInfoService/AddSkill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoServiceClient) AddInterest(ctx context.Context, in *InterestsUpdateRequest, opts ...grpc.CallOption) (*UserInfoUpdateResponse, error) {
	out := new(UserInfoUpdateResponse)
	err := c.cc.Invoke(ctx, "/user_info.UserInfoService/AddInterest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInfoServiceServer is the server API for UserInfoService service.
// All implementations must embed UnimplementedUserInfoServiceServer
// for forward compatibility
type UserInfoServiceServer interface {
	UpdatePersonalInfo(context.Context, *UserInfoUpdate) (*UserInfoUpdateResponse, error)
	AddExperience(context.Context, *ExperienceUpdateRequest) (*UserInfoUpdateResponse, error)
	AddEducation(context.Context, *EducationUpdateRequest) (*UserInfoUpdateResponse, error)
	AddSkill(context.Context, *SkillsUpdateRequest) (*UserInfoUpdateResponse, error)
	AddInterest(context.Context, *InterestsUpdateRequest) (*UserInfoUpdateResponse, error)
	mustEmbedUnimplementedUserInfoServiceServer()
}

// UnimplementedUserInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserInfoServiceServer struct {
}

func (UnimplementedUserInfoServiceServer) UpdatePersonalInfo(context.Context, *UserInfoUpdate) (*UserInfoUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonalInfo not implemented")
}
func (UnimplementedUserInfoServiceServer) AddExperience(context.Context, *ExperienceUpdateRequest) (*UserInfoUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExperience not implemented")
}
func (UnimplementedUserInfoServiceServer) AddEducation(context.Context, *EducationUpdateRequest) (*UserInfoUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEducation not implemented")
}
func (UnimplementedUserInfoServiceServer) AddSkill(context.Context, *SkillsUpdateRequest) (*UserInfoUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSkill not implemented")
}
func (UnimplementedUserInfoServiceServer) AddInterest(context.Context, *InterestsUpdateRequest) (*UserInfoUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInterest not implemented")
}
func (UnimplementedUserInfoServiceServer) mustEmbedUnimplementedUserInfoServiceServer() {}

// UnsafeUserInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInfoServiceServer will
// result in compilation errors.
type UnsafeUserInfoServiceServer interface {
	mustEmbedUnimplementedUserInfoServiceServer()
}

func RegisterUserInfoServiceServer(s grpc.ServiceRegistrar, srv UserInfoServiceServer) {
	s.RegisterService(&UserInfoService_ServiceDesc, srv)
}

func _UserInfoService_UpdatePersonalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServiceServer).UpdatePersonalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_info.UserInfoService/UpdatePersonalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServiceServer).UpdatePersonalInfo(ctx, req.(*UserInfoUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoService_AddExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExperienceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServiceServer).AddExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_info.UserInfoService/AddExperience",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServiceServer).AddExperience(ctx, req.(*ExperienceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoService_AddEducation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EducationUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServiceServer).AddEducation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_info.UserInfoService/AddEducation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServiceServer).AddEducation(ctx, req.(*EducationUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoService_AddSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkillsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServiceServer).AddSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_info.UserInfoService/AddSkill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServiceServer).AddSkill(ctx, req.(*SkillsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoService_AddInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterestsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoServiceServer).AddInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_info.UserInfoService/AddInterest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoServiceServer).AddInterest(ctx, req.(*InterestsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserInfoService_ServiceDesc is the grpc.ServiceDesc for UserInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_info.UserInfoService",
	HandlerType: (*UserInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePersonalInfo",
			Handler:    _UserInfoService_UpdatePersonalInfo_Handler,
		},
		{
			MethodName: "AddExperience",
			Handler:    _UserInfoService_AddExperience_Handler,
		},
		{
			MethodName: "AddEducation",
			Handler:    _UserInfoService_AddEducation_Handler,
		},
		{
			MethodName: "AddSkill",
			Handler:    _UserInfoService_AddSkill_Handler,
		},
		{
			MethodName: "AddInterest",
			Handler:    _UserInfoService_AddInterest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_info/user_info_service.proto",
}
